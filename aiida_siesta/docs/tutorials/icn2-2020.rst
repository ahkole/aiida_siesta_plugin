.. _ICN2 2020 Homepage:

2020, ICN2, Barcelona, Spain
=================================


+-----------------+----------------------------------------------------------------------------+
| Related resources                                                                            |
+=================+============================================================================+
| Virtual Machine | `Quantum Mobile 20.06.1`_                                                  |
+-----------------+----------------------------------------------------------------------------+
| python packages | `aiida-core 1.4.2`_, `aiida-siesta 1.1.0`_,                                |
+-----------------+----------------------------------------------------------------------------+
| codes           | `Siesta v4.1-rc1`_                                                         |
+-----------------+----------------------------------------------------------------------------+

.. _Quantum Mobile 20.06.1: https://github.com/marvel-nccr/quantum-mobile/releases/tag/20.06.1
.. _aiida-core 1.4.2: https://pypi.org/project/aiida-core/1.4.2
.. _aiida-siesta 1.1.0: https://pypi.org/project/aiida-siesta/1.1.0
.. _Siesta v4.1-rc1: https://gitlab.com/siesta-project/siesta/-/wikis/Guide-to-Siesta-versions

These are the notes of the tutorial delivered to the "Theory and Simulation group" at ICN2 (Barcelona) the 19th of October 2020.
The tutorial was carried on using the Quantum Mobile Virtual Machine, however the steps described below can be 
replicated (with some small modifications pointed out along the way) on a local machine to obtain a working AiiDA (and aiida-siesta)
installation.
Tutors: Emanuele Bosoni, Pol Febrer.

Installation
------------

Installation is through ``pip`` after moving to a new virual environment (we use ``virtualenvwrapper``, but any alternative is valid, only
make sure to select a python version 3.6 or above). We call the virtual environment ``tutorial``.

.. code-block:: python

   mkvirtualenv -p=/usr/bin/python3.6 tutorial
   workon tutorial
   pip install aiida-siesta==1.1.0

This will install an appropriate version of ``aiida-core`` (last realease at the time of the tutorial is 1.4.2).

.. note:: If you are not on the Quantum Mobile Virtual Machine, a preliminary step is required to install
   PostgreSQL and RabbitMQ, as described
   `here <https://aiida.readthedocs.io/projects/aiida-core/en/latest/intro/installation.html#installing-prerequisites>`_

Because we want to isolate the current installation from other installations that might be present in the machine,
we specify the aiida configuration directory in the virtual environment activation file::

        echo 'export AIIDA_PATH=$VIRTUAL_ENV' >> $VIRTUAL_ENV/bin/postactivate
        workon tutorial

The configuration directory is now ``~/.virtualenvs/tutorial``.

Moreover we can add in the same file a line to activate tab-completion::

        echo 'eval "$(_VERDI_COMPLETE=source verdi)"' >> $VIRTUAL_ENV/bin/postactivate
        workon tutorial

Check the status of the installation::

        verdi status

This should show that the configuration directory is set, but no profile has been created yet.

Setting up the AiiDA profile
----------------------------

The aiida profile is set up with one single command::

        verdi quicksetup

An interactive shell will ask some data and after that the creation of the profile starts. It concludes with the message "Success: database migration completed".
Now is time to scan for plugins and start the daemon::

        reentry scan
        verdi daemon start

If all the steps have been succesfull, you should be able to see all green ticks when typing

.. code-block:: python

        verdi status

and also be able to see "siesta.siesta" among the available calculations plugins::

        verdi plugin list aiida.calculations

We are ready to set up a code and computer.

Computer and code setup
-----------------------

The setup of a computer is done through::

        verdi computer setup

and filling in the interactive shell requirements. For the Quantum Mobile they are::

        Computer label: localhost
        Hostname: localhost
        Description []: This machine
        Transport plugin: local
        Scheduler plugin: slurm
        Shebang line (first line of each script, starting with #!) [#!/bin/bash]:
        Work directory on the computer [/scratch/{username}/aiida/]: /home/max/tut/aiidarun
        Mpirun command [mpirun -np {tot_num_mpiprocs}]:
        Default number of CPUs per machine: 2

Then a file is automatically opened with "vi" editor. It allows to insert text to prepend/append to
any submission script. We don't require it. Therefore just press ``Esc`` and type ``:wq``.

Any remote computer can be set up in the exact same way, just making sure to have a passwordless
access to it (ssh key) and selecting "ssh" as "Transport plugin". 

The computer must be configured, this allows to select some advanced features::

        verdi computer configure local localhost

The default values are ok for the sake of this tutorial, therefore just press enter.
The computer setup is over and the success of this action can be checked with::

        verdi computer test localhost

The next step is the setup of a code.

.. note:: This section covers the set up of the Siesta code already installed in the Quantum Mobile virtual
   machine. In case of local installation, make sure to include the right specifications for your Siesta code
   (that might be on a remote cluster).

The command is::

        verdi code setup

and the interactive shell will facilitate the setting up of the code. For Quantum Mobile we insert::

        Label: siesta-v4.1
        Description []: siesta-v4.1-rc1
        Default calculation input plugin: siesta.siesta
        Installed on target computer? [True]: 
        Computer: localhost
        Remote absolute path: /usr/local/bin/siesta

Again a file is opened, asking to specify an optional text to prepend/append to the submission script.
Typically here is where we include the calls to modules that are needed to run the code.
In our case we insert "ulimit -s unlimited" as prepend text. The writing mode of "vi" is activated
pressing ``i``, after the insertion, ``Esc`` and ``:wq`` to save the file.

The code is set up.

.. note:: It is also possible to set up computer and codes from a configuration file. The computer::
        
        verdi computer setup --yaml hpcq.yml

   The code::

        verdi code setup --yaml siesta_farm5.yml

   Examples of these yaml files are provided.


Creating a pseudo family
------------------------

Before starting to play with `aiida-siesta`, it can be useful to learn how to
set up of a pseudopotential family. We download a set of
pseudopotentials from `PseudoDojo <http://www.pseudo-dojo.org/>`_::

      wget http://www.pseudo-dojo.org/pseudos/nc-sr-04_pbe_standard_psml.tgz
      mkdir nc-sr-04_pbe_standard_psml
      tar -xf nc-sr-04_pbe_standard_psml.tgz -C nc-sr-04_pbe_standard_psml

and store tham in the database under the name "nc-sr-04_pbe_standard_psml"::

      verdi data psml uploadfamily nc-sr-04_pbe_standard_psml nc-sr-04_pbe_standard_psml "Scalar-relativistic psml standard"

Same can be done for psf pseudopotentials, for instance::

      wget https://icmab.es/leem/SIESTA_MATERIAL/tmp_PseudoDojo/nc-sr-04_pbe_standard-psf.tgz
      tar -xf nc-sr-04_pbe_standard-psf.tgz
      verdi data psf uploadfamily nc-sr-04_pbe_standard-psf nc-sr-04_pbe_standard-psf "Scalar Relativistic psf"

.. note:: The presudopotentials sets used in this tutorial come with no guarantee!! Use with care!


Submit a single siesta calculation
----------------------------------

Open the file ``example_bands.py`` and explore the setting up of the various inputs.
Run the script with::

        runaiida --dont-send example_bands.py

The option ``--dont-send`` has been added in order to activate the "dry_run" option that every aiida process has.
This option allows to create all the inputs of the calculation, but do not submit it.
You can explore in the folder ``submit_test`` how AiiDA prepared all the inputs of a siesta calculation for you.

Now run::

        runaiida --send example_bands.py

AiiDA took charge of your script, created the inputs and submitted the calculation. Look at the state of the
process with the command ``verdi process show`` as suggested in the shell.

In few seconds the calculation is finished and we could explore the outputs. This can be done from command line,
for instance::

        verdi data array show <PK_forces_and_stress>

        
however it is worth exploring the shell provided by AiiDA::

        verdi shell

Inside the shell::

        l=load_node(<PK_calculation>)

and explore all the methods making use of tab completion. For instance::

        l.outputs.bands.export(path="Si_bands", fileformat="gnuplot", y_max_lim=10)

The command above creates a file that can be plot with gnuplot in order to visualize the bands::

        gnuplot --persist Si_bands

Take the chance to explore methods and attributes of data types associated to 
the inputs and outputs of a ``SiestaCalculation``.
